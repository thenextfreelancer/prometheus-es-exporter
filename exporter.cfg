# This section defines default settings for how queries should be run.
# All settings can be overridden for any given query in its own section.
# The values shown in this example are also the fallback values used if
# a setting is not specified in the DEFAULT section or a query's section.
[DEFAULT]
# How often to run queries.
QueryIntervalSecs = 15
# How long to wait for a query to return before timing out.
QueryTimeoutSecs = 10
# The indices to run the query on.
# Any way of specifying indices supported by your Elasticsearch version can be used.
QueryIndices = _all
# What to do if a query throws an error. One of:
# * preserve - keep the metrics/values from the last successful run.
# * drop - remove metrics previously produced by the query.
# * zero - keep metrics previously produced by the query, but reset their values to 0.
QueryOnError = drop
# What to do if a metric produced by the previous run of a query is not present
# in the current run. One of:
# * preserve - keep the value of the metric from the last run it was present in.
# * drop - remove the metric.
# * zero - keep the metric, but reset its value to 0.
QueryOnMissing = drop

# List of elastic indices for which stats will be published as KPIs.
# mention comma separated index names for stats metrics
[INDICES_FOR_STATS_METRICS]
QueryIntervalSecs = 5
QueryTimeoutSecs = 5
QueryIndices = index-1,index-2

# Queries are defined in sections beginning with 'query_'.
# Characters following this prefix will be used as a prefix for all metrics
# generated for this query

[query_es_query_closed_tickets]
QueryIntervalSecs = 5
QueryTimeoutSecs = 5
QueryIndices = ticket-store
QueryOnError = preserve
QueryOnMissing = zero
QueryJson = {
			  "size": 0,
			  "query": {
				"terms": {
				  "status": ["CLOSED"]
				}
			  }
			}


# Chained Queries are defined in sections beginning with 'chain_query_'.
# Characters following this prefix will be used as a prefix for all metrics
# generated for this query
# List of 'key' field is the output of query_parent_def after running query mentioned in query_parent_def 'query' value.query_parent_def
# This output is passed as 'key' in query_child_def for filtering the values.
# Only aggregation is supported in query_child_def since query filter is generated by query_parent_def for query_child_def
# Example, parent_index has
# {
#    "id":"ticket1",
#    "status":"open"
# }
# child_index has multiple docs of this ticket with field ticketId
# {
#    "ticketId" : "ticket1",
#    "assignee" : "Mark"
# },
# {
#    "ticketId" : "ticket1",
#    "assignee" : "Kerry"
# }
#
# User can easily find assignees count using following chained query if there are more than 2 assignees for a ticket
[chain_query_es_query_closed_service_problems]
QueryIntervalSecs = 60
QueryTimeoutSecs = 60
QueryOnError = preserve
QueryOnMissing = zero
QueryJson = {
                "query_parent_def" : {
                    "index" : "parent_index",
                    "key" : "id",
                    "query" : {
                          "query": {
                            "terms": {
                              "status": ["open"]
                            }
                          },
                           "sort": [
                            {
                              "timeRaised": {
                                "order": "asc"
                              }
                            }
                          ]
                        }
                },
                "query_child_def" : {
                    "key" : "ticketId",
                    "index" : "child_index",
                    "query" : {
                        "aggs": {
                            "attrs": {
                                  "terms": {
                                    "field": "ticketId",
                                    "size": 100,
                                    "min_doc_count": 2,
                                    "order": {
                                      "_count": "desc"
                                    }
                                  }
                            }
                          }
                    }
                }
            }
